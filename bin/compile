#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

set -eo pipefail

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

# Skip frontend buildpack for review apps except zeneducate-pr-224
if [ "$SERVER_NAME" = "review" ] && [ "$HEROKU_APP_NAME" != "zeneducate-pr-224" ]; then
  echo "-----> Skipping frontend build for review app: $HEROKU_APP_NAME"
  exit 0
fi

indent() {
  sed -u 's/^/       /'
}

# Function to build env string for npm run build
build_web_env_string() {
  local env_string=""
  if [ -d "$ENV_DIR" ]; then
    for e in $(ls $ENV_DIR); do
      if [[ $e == WEB_* ]]; then
        # Get the value
        local value=$(cat "$ENV_DIR/$e")
        # Remove WEB_ prefix
        local var_name=${e#WEB_}
        # Add to env string
        env_string="$env_string $var_name='$value'"
        # Print debug info to stderr so it doesn't get captured
        echo "-----> Setting $var_name for build" | indent >&2
      fi
    done
  fi
  echo "$env_string"
}

echo "-----> Frontend Buildpack: Starting build process"

cd $BUILD_DIR

# Check if web directory exists
if [ ! -d "web" ]; then
  echo "-----> No web directory found, skipping frontend build"
  exit 0
fi

cd web

# Check if sha-files script exists
if [ ! -f "./bin/sha-files" ]; then
  echo "-----> ERROR: ./web/bin/sha-files script not found"
  exit 1
fi

# Calculate checksum using the existing script
echo "-----> Calculating web directory checksum"
WEB_CHECKSUM=$(bash ./bin/sha-files | tail -n 1)
echo "-----> Current checksum: $WEB_CHECKSUM" | indent

# Check if this build already exists in cache
CACHED_BUILD_DIR="$CACHE_DIR/web-builds/$WEB_CHECKSUM"

if [ -d "$CACHED_BUILD_DIR" ] && [ -d "$CACHED_BUILD_DIR/dist" ]; then
  echo "-----> Build found in cache, using cached version"
  echo "-----> Cached build exists, skipping rebuild"

  # Copy dist back into web/
  cp -r "$CACHED_BUILD_DIR/dist" "$BUILD_DIR/web/"

  echo "-----> Frontend build complete (from cache)"
  exit 0
fi

echo "-----> No cached build found, proceeding with fresh build"

# Ensure Node.js is available (assuming another buildpack provides it)
if ! command -v node &> /dev/null; then
  echo "-----> ERROR: Node.js not found. Ensure Node.js buildpack runs before this one."
  exit 1
fi

# Cache npm dependencies by package-lock.json checksum
echo "-----> Checking for cached node_modules"

NPM_CACHE_CHECKSUM=$(sha256sum package-lock.json | awk '{print $1}')
echo "-----> Node modules checksum: $NPM_CACHE_CHECKSUM" | indent
NPM_CACHE_DIR="$CACHE_DIR/npm-cache/$NPM_CACHE_CHECKSUM"

if [ -d "$NPM_CACHE_DIR/node_modules" ]; then
  echo "-----> Restoring cached node_modules" | indent
  cp -R "$NPM_CACHE_DIR/node_modules" ./node_modules
else
  echo "-----> No cache found, installing dependencies" | indent
  npm ci --production=false 2>&1 | indent

  echo "-----> Caching node_modules" | indent
  mkdir -p "$NPM_CACHE_DIR"
  cp -R ./node_modules "$NPM_CACHE_DIR/"
fi

# Build environment variables string
echo "-----> Preparing WEB_ environment variables for build"
WEB_ENV_STRING=$(build_web_env_string)

# Increase Node.js memory limit for the build
export NODE_OPTIONS="--max-old-space-size=4096"
echo "-----> Setting NODE_OPTIONS=$NODE_OPTIONS" | indent

# Build the frontend
echo "-----> Building frontend application"
env $WEB_ENV_STRING NODE_OPTIONS="$NODE_OPTIONS" npm run build 2>&1 | indent

# Cache the build
echo "-----> Caching build for future deployments"
mkdir -p "$CACHED_BUILD_DIR"
cp -r dist "$CACHED_BUILD_DIR/"

# Clean up most of web to keep the slug small
echo "-----> Keeping slug small"
for item in *; do
  case "$item" in
    dist|bin|public)
      # keep these
      ;;
    *)
      rm -rf "$item"
      ;;
  esac
done

echo "-----> Frontend build complete"
